"""
Service de d√©tection IA am√©lior√© utilisant des mod√®les pr√©-entra√Æn√©s.
Compatible avec plusieurs types de mod√®les et m√©thodes de d√©tection.
"""

import os
import logging
import numpy as np
from PIL import Image
from typing import Dict, Any, Optional
import tensorflow as tf
from tensorflow import keras

logger = logging.getLogger(__name__)

class AIDetectionServiceAdvanced:
    """Service avanc√© pour la d√©tection d'images g√©n√©r√©es par IA."""

    def __init__(self, model_path: str = "model.h5"):
        """
        Initialise le service de d√©tection IA.

        Args:
            model_path: Chemin vers le mod√®le √† charger
        """
        self.model_path = model_path
        self.model = None
        self.model_type = None
        self.is_loaded = False

        # Tenter de charger le mod√®le
        self._load_model()

    def _load_model(self):
        """Charge le mod√®le IA."""
        try:
            if os.path.exists(self.model_path):
                self.model = keras.models.load_model(self.model_path)
                self.model_type = "custom"
                self.is_loaded = True
                logger.info(f"‚úÖ Mod√®le personnalis√© charg√©: {self.model_path}")
            else:
                # Charger un mod√®le de fallback bas√© sur MobileNetV2
                self._load_fallback_model()
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Impossible de charger le mod√®le {self.model_path}: {e}")
            # Tenter de charger un mod√®le de fallback
            self._load_fallback_model()

    def _load_fallback_model(self):
        """Charge un mod√®le de fallback bas√© sur des caract√©ristiques pr√©-entra√Æn√©es."""
        try:
            logger.info("üîÑ Chargement du mod√®le de fallback...")

            # Cr√©er un mod√®le simple bas√© sur MobileNetV2
            base_model = keras.applications.MobileNetV2(
                input_shape=(128, 128, 3),
                include_top=False,
                weights='imagenet'
            )
            base_model.trainable = False

            self.model = keras.Sequential([
                base_model,
                keras.layers.GlobalAveragePooling2D(),
                keras.layers.Dense(128, activation='relu'),
                keras.layers.Dropout(0.5),
                keras.layers.Dense(1, activation='sigmoid')
            ])

            # Compiler le mod√®le
            self.model.compile(
                optimizer='adam',
                loss='binary_crossentropy',
                metrics=['accuracy']
            )

            self.model_type = "fallback_mobilenet"
            self.is_loaded = True
            logger.info("‚úÖ Mod√®le de fallback MobileNetV2 charg√©")

        except Exception as e:
            logger.error(f"‚ùå Impossible de charger le mod√®le de fallback: {e}")
            self.model = None
            self.is_loaded = False

    def detect_ai_image(self, image_path: str) -> Dict[str, Any]:
        """
        D√©tecte si une image est g√©n√©r√©e par IA (impl√©mentation exacte de steganoV2.py).

        Args:
            image_path: Chemin vers l'image √† analyser

        Returns:
            Dict contenant les r√©sultats de la d√©tection
        """
        try:
            if not self.is_loaded:
                return {
                    "error": "Mod√®le IA non disponible",
                    "is_ai_generated": False,
                    "confidence": 0.0,
                    "method": "unavailable"
                }

            # Pr√©processer l'image exactement comme dans steganoV2.py
            img = Image.open(image_path).convert("RGB")
            img = img.resize((128, 128), Image.Resampling.LANCZOS)
            img_array = np.array(img, dtype=np.float32) / 255.0
            img_array = np.expand_dims(img_array, axis=0)

            # Pr√©diction
            if self.model_type == "fallback_mobilenet":
                # Pour le mod√®le de fallback, utiliser une heuristique bas√©e sur les caract√©ristiques
                prediction = self._fallback_prediction(img_array)
            else:
                # Utiliser le mod√®le personnalis√©
                prediction = self.model.predict(img_array, verbose=0)

            confidence = float(prediction[0][0])
            is_ai_generated = confidence > 0.5

            result = {
                "is_ai_generated": is_ai_generated,
                "confidence": round(confidence * 100, 2),
                "method": self.model_type,
                "model_path": self.model_path if self.model_type == "custom" else "fallback"
            }

            logger.info(f"D√©tection IA: {confidence*100:.1f}% (m√©thode: {self.model_type})")
            return result

        except Exception as e:
            logger.error(f"Erreur lors de la d√©tection IA: {str(e)}")
            return {
                "error": f"Erreur lors de la d√©tection: {str(e)}",
                "is_ai_generated": False,
                "confidence": 0.0,
                "method": "error"
            }

    def _fallback_prediction(self, img_array: np.ndarray) -> np.ndarray:
        """
        Pr√©diction de fallback bas√©e sur des caract√©ristiques visuelles.

        Args:
            img_array: Image pr√©process√©e

        Returns:
            Pr√©diction sous forme de tableau numpy
        """
        try:
            # Extraire des caract√©ristiques avec le mod√®le de base
            features = self.model.layers[0](img_array)  # MobileNetV2 base
            features = self.model.layers[1](features)   # GlobalAveragePooling2D

            # Analyse heuristique bas√©e sur les caract√©ristiques
            feature_mean = np.mean(features.numpy())
            feature_std = np.std(features.numpy())

            # Heuristique simple: les images IA ont souvent des patterns sp√©cifiques
            # Cette heuristique peut √™tre am√©lior√©e avec plus de recherche
            ai_score = 0.3  # Score de base

            # Ajuster selon les caract√©ristiques
            if feature_std < 0.1:  # Peu de variation -> potentiellement IA
                ai_score += 0.2
            if feature_mean > 0.8:  # Valeurs √©lev√©es -> potentiellement IA
                ai_score += 0.1

            # Limiter entre 0 et 1
            ai_score = max(0.0, min(1.0, ai_score))

            return np.array([[ai_score]])

        except Exception as e:
            logger.error(f"Erreur pr√©diction fallback: {e}")
            return np.array([[0.3]])  # Score neutre

    def is_available(self) -> Dict[str, Any]:
        """
        V√©rifie si le service est disponible.

        Returns:
            Dict avec le statut du service
        """
        return {
            "available": self.is_loaded,
            "model_type": self.model_type,
            "model_path": self.model_path if self.model_type == "custom" else "fallback",
            "tensorflow_version": tf.__version__
        }

    def is_model_loaded(self) -> bool:
        """V√©rifie si le mod√®le est charg√©."""
        return self.is_loaded
