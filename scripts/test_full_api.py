#!/usr/bin/env python3
"""
Test complet de l'application Stegano-Flask avec TensorFlow
"""

import requests
import json
import os
import time
from datetime import datetime

BASE_URL = "http://localhost:5000"
TEST_IMAGE_PATH = "test_images/test_image_1.jpg"

def test_api_endpoints():
    """Test tous les endpoints de l'API."""

    print("=== Test des endpoints de base ===")

    # Test du health check
    try:
        response = requests.get(f"{BASE_URL}/health")
        if response.status_code == 200:
            print("‚úÖ Health check OK")
        else:
            print(f"‚ùå Health check failed: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur health check: {e}")

    # Test de l'endpoint racine
    try:
        response = requests.get(f"{BASE_URL}/")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Root endpoint OK - Version: {data.get('version', 'N/A')}")
        else:
            print(f"‚ùå Root endpoint failed: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur root endpoint: {e}")

    # Test des endpoints avanc√©s (v2)
    try:
        response = requests.get(f"{BASE_URL}/api/v2/health")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ API v2 health check OK")
            services = data.get('services', {})
            for service, status in services.items():
                status_icon = "‚úÖ" if status else "‚ùå"
                print(f"  {status_icon} {service}: {status}")
        else:
            print(f"‚ùå API v2 health check failed: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur API v2 health check: {e}")

def test_steganography_endpoints():
    """Test des endpoints de st√©ganographie."""

    print("\n=== Test des endpoints de st√©ganographie ===")

    if not os.path.exists(TEST_IMAGE_PATH):
        print(f"‚ùå Image de test non trouv√©e: {TEST_IMAGE_PATH}")
        return

    # Test d'insertion de message (LSB custom)
    try:
        with open(TEST_IMAGE_PATH, 'rb') as f:
            files = {'image': f}
            data = {'message': 'Message de test secret'}

            response = requests.post(
                f"{BASE_URL}/api/v2/steganography/embed-custom",
                files=files,
                data=data
            )

            if response.status_code == 200:
                result = response.json()
                print("‚úÖ Insertion LSB custom r√©ussie")
                print(f"  Capacit√© utilis√©e: {result['result']['capacity_used']:.2f}%")
                return result.get('result', {}).get('output_path')
            else:
                print(f"‚ùå Insertion LSB custom √©chou√©e: {response.status_code}")
                print(f"  Erreur: {response.text}")

    except Exception as e:
        print(f"‚ùå Erreur test insertion: {e}")

    return None

def test_ai_detection():
    """Test de d√©tection IA."""

    print("\n=== Test de d√©tection IA ===")

    if not os.path.exists(TEST_IMAGE_PATH):
        print(f"‚ùå Image de test non trouv√©e: {TEST_IMAGE_PATH}")
        return

    try:
        with open(TEST_IMAGE_PATH, 'rb') as f:
            files = {'image': f}

            response = requests.post(
                f"{BASE_URL}/api/v2/ai/detect-generated",
                files=files
            )

            if response.status_code == 200:
                result = response.json()
                print("‚úÖ D√©tection IA r√©ussie")
                ai_result = result.get('result', {})
                if 'is_ai_generated' in ai_result:
                    print(f"  IA g√©n√©r√©e: {ai_result['is_ai_generated']}")
                    print(f"  Confiance: {ai_result.get('confidence', 0):.2f}")
                else:
                    print("  Mod√®le IA non disponible")
            else:
                print(f"‚ùå D√©tection IA √©chou√©e: {response.status_code}")
                print(f"  Erreur: {response.text}")

    except Exception as e:
        print(f"‚ùå Erreur test d√©tection IA: {e}")

def test_similarity_analysis():
    """Test d'analyse de similarit√©."""

    print("\n=== Test d'analyse de similarit√© ===")

    if not os.path.exists(TEST_IMAGE_PATH):
        print(f"‚ùå Image de test non trouv√©e: {TEST_IMAGE_PATH}")
        return

    try:
        with open(TEST_IMAGE_PATH, 'rb') as f:
            files = {'image': f}

            response = requests.post(
                f"{BASE_URL}/api/v2/analysis/similarity",
                files=files
            )

            if response.status_code == 200:
                result = response.json()
                print("‚úÖ Analyse de similarit√© r√©ussie")
                print(f"  Images similaires trouv√©es: {result['total_found']}")

                hashes = result.get('hashes', {})
                if hashes.get('success'):
                    print(f"  pHash: {hashes.get('phash', 'N/A')}")
                    print(f"  dHash: {hashes.get('dhash', 'N/A')}")
            else:
                print(f"‚ùå Analyse de similarit√© √©chou√©e: {response.status_code}")
                print(f"  Erreur: {response.text}")

    except Exception as e:
        print(f"‚ùå Erreur test similarit√©: {e}")

def test_structure_analysis():
    """Test d'analyse de structure."""

    print("\n=== Test d'analyse de structure ===")

    if not os.path.exists(TEST_IMAGE_PATH):
        print(f"‚ùå Image de test non trouv√©e: {TEST_IMAGE_PATH}")
        return

    try:
        with open(TEST_IMAGE_PATH, 'rb') as f:
            files = {'image': f}

            response = requests.post(
                f"{BASE_URL}/api/v2/analysis/structure",
                files=files
            )

            if response.status_code == 200:
                result = response.json()
                print("‚úÖ Analyse de structure r√©ussie")
                analysis = result.get('analysis', {})
                if 'statistics' in analysis:
                    stats = analysis['statistics']
                    print(f"  Score de suspicion: {analysis.get('suspicion_score', 0):.2f}")
                    print(f"  St√©ganographie probable: {analysis.get('analysis', {}).get('likely_steganography', False)}")
            else:
                print(f"‚ùå Analyse de structure √©chou√©e: {response.status_code}")
                print(f"  Erreur: {response.text}")

    except Exception as e:
        print(f"‚ùå Erreur test structure: {e}")

def main():
    """Fonction principale de test."""
    print("üß™ Test complet de l'API Stegano-Flask")
    print(f"‚è∞ D√©marr√© √†: {datetime.now().isoformat()}")
    print(f"üåê URL de base: {BASE_URL}")
    print()

    # Attendre que le serveur soit pr√™t
    print("‚è≥ Attente du d√©marrage du serveur...")
    time.sleep(2)

    # Tests s√©quentiels
    test_api_endpoints()
    test_steganography_endpoints()
    test_ai_detection()
    test_similarity_analysis()
    test_structure_analysis()

    print("\n‚úÖ Tests termin√©s")

if __name__ == "__main__":
    main()
