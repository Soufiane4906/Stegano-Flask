#!/bin/bash
# Script de test rapide pour l'API JPEG Steganography

set -e  # Arr√™ter en cas d'erreur

BASE_URL="http://localhost:5000/api/v2/jpeg"
TEST_IMAGE="/test_outputs/test_lsb_hidden.jpg"
UPLOAD_DIR="uploads"

# Couleurs pour l'affichage
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${GREEN}üß™ Script de test pour l'API JPEG Steganography${NC}"
echo "=================================================="

# Fonction pour afficher les r√©sultats
print_result() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
    else
        echo -e "${RED}‚ùå $2${NC}"
    fi
}

# V√©rifier que l'application est lanc√©e
echo -e "${YELLOW}üîç V√©rification de la disponibilit√© de l'API...${NC}"
if curl -s -f "$BASE_URL/methods" > /dev/null; then
    print_result 0 "API accessible"
else
    print_result 1 "API non accessible - V√©rifiez que l'application est lanc√©e"
    exit 1
fi

# V√©rifier que l'image de test existe
if [ ! -f "$TEST_IMAGE" ]; then
    echo -e "${RED}‚ùå Image de test non trouv√©e: $TEST_IMAGE${NC}"
    echo "üí° Placez une image JPEG dans le dossier test_images/"
    exit 1
fi

# Test 1: Obtenir les m√©thodes disponibles
echo -e "\n${YELLOW}üìö Test 1: M√©thodes disponibles${NC}"
curl -s "$BASE_URL/methods" | jq -r '.methods | keys[]' | while read method; do
    echo "  - $method"
done

# Test 2: Analyser la capacit√©
echo -e "\n${YELLOW}üìä Test 2: Analyse de capacit√©${NC}"
CAPACITY_RESULT=$(curl -s -X POST "$BASE_URL/analyze_capacity" \
    -F "file=@$TEST_IMAGE")

if echo "$CAPACITY_RESULT" | jq -e '.success' > /dev/null; then
    print_result 0 "Analyse de capacit√© r√©ussie"
    EXIF_CAP=$(echo "$CAPACITY_RESULT" | jq -r '.capacity_analysis.exif_capacity // 0')
    LSB_CAP=$(echo "$CAPACITY_RESULT" | jq -r '.capacity_analysis.lsb_capacity // 0')
    echo "  üì§ Capacit√© EXIF: $EXIF_CAP caract√®res"
    echo "  üì§ Capacit√© LSB: $LSB_CAP caract√®res"
else
    print_result 1 "√âchec de l'analyse de capacit√©"
    echo "$CAPACITY_RESULT" | jq '.error // .'
fi

# Test 3: Cacher un message EXIF
echo -e "\n${YELLOW}üîê Test 3: Dissimulation EXIF${NC}"
HIDE_RESULT=$(curl -s -X POST "$BASE_URL/hide_message" \
    -F "file=@$TEST_IMAGE" \
    -F "message=Test automatique EXIF üîí" \
    -F "method=exif")

if echo "$HIDE_RESULT" | jq -e '.success' > /dev/null; then
    print_result 0 "Dissimulation EXIF r√©ussie"
    OUTPUT_FILE=$(echo "$HIDE_RESULT" | jq -r '.output_filename')
    echo "  üìÑ Fichier cr√©√©: $OUTPUT_FILE"

    # Test 4: Extraire le message EXIF
    echo -e "\n${YELLOW}üîç Test 4: Extraction EXIF${NC}"
    if [ -f "$UPLOAD_DIR/$OUTPUT_FILE" ]; then
        EXTRACT_RESULT=$(curl -s -X POST "$BASE_URL/extract_message" \
            -F "file=@$UPLOAD_DIR/$OUTPUT_FILE" \
            -F "method=exif")

        if echo "$EXTRACT_RESULT" | jq -e '.success' > /dev/null; then
            print_result 0 "Extraction EXIF r√©ussie"
            MESSAGE=$(echo "$EXTRACT_RESULT" | jq -r '.message // "Aucun message"')
            echo "  üí¨ Message extrait: $MESSAGE"
        else
            print_result 1 "√âchec de l'extraction EXIF"
            echo "$EXTRACT_RESULT" | jq '.error // .'
        fi
    else
        print_result 1 "Fichier de sortie non trouv√©: $UPLOAD_DIR/$OUTPUT_FILE"
    fi
else
    print_result 1 "√âchec de la dissimulation EXIF"
    echo "$HIDE_RESULT" | jq '.error // .'
fi

# Test 5: Test LSB avec une image plus grande si disponible
LSB_TEST_IMAGE="test_images/test_image_3.jpg"
if [ -f "$LSB_TEST_IMAGE" ]; then
    echo -e "\n${YELLOW}üî¢ Test 5: Dissimulation LSB${NC}"
    LSB_HIDE_RESULT=$(curl -s -X POST "$BASE_URL/hide_message" \
        -F "file=@$LSB_TEST_IMAGE" \
        -F "message=Message plus long pour tester LSB avec plus de capacit√© que EXIF." \
        -F "method=lsb")

    if echo "$LSB_HIDE_RESULT" | jq -e '.success' > /dev/null; then
        print_result 0 "Dissimulation LSB r√©ussie"
        LSB_OUTPUT_FILE=$(echo "$LSB_HIDE_RESULT" | jq -r '.output_filename')
        echo "  üìÑ Fichier cr√©√©: $LSB_OUTPUT_FILE"
    else
        print_result 1 "√âchec de la dissimulation LSB"
        echo "$LSB_HIDE_RESULT" | jq '.error // .'
    fi
fi

# Test 6: Test de signature
echo -e "\n${YELLOW}‚úçÔ∏è Test 6: Signature st√©ganographique${NC}"
SIGNATURE_RESULT=$(curl -s -X POST "$BASE_URL/create_signature" \
    -F "file=@$TEST_IMAGE")

if echo "$SIGNATURE_RESULT" | jq -e '.success' > /dev/null; then
    print_result 0 "Cr√©ation de signature r√©ussie"
    SIGNED_FILE=$(echo "$SIGNATURE_RESULT" | jq -r '.signed_filename')
    echo "  üìÑ Fichier sign√©: $SIGNED_FILE"

    # V√©rifier la signature
    if [ -f "$UPLOAD_DIR/$SIGNED_FILE" ]; then
        VERIFY_RESULT=$(curl -s -X POST "$BASE_URL/verify_signature" \
            -F "file=@$UPLOAD_DIR/$SIGNED_FILE")

        if echo "$VERIFY_RESULT" | jq -e '.verification_result.verified' > /dev/null; then
            print_result 0 "V√©rification de signature r√©ussie"
        else
            print_result 1 "√âchec de la v√©rification de signature"
        fi
    fi
else
    print_result 1 "√âchec de la cr√©ation de signature"
    echo "$SIGNATURE_RESULT" | jq '.error // .'
fi

echo -e "\n${GREEN}üéâ Tests termin√©s !${NC}"
echo "=================================================="

# Afficher les fichiers cr√©√©s
echo -e "\n${YELLOW}üìÅ Fichiers cr√©√©s dans $UPLOAD_DIR/:${NC}"
if [ -d "$UPLOAD_DIR" ]; then
    ls -la "$UPLOAD_DIR"/ | grep -E '\.(jpg|jpeg)$' || echo "  Aucun fichier JPEG trouv√©"
else
    echo "  Dossier $UPLOAD_DIR non trouv√©"
fi
