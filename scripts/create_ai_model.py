#!/usr/bin/env python3
"""
Script pour cr√©er un mod√®le IA compatible pour la d√©tection d'images g√©n√©r√©es par IA.
Utilise un mod√®le pr√©-entra√Æn√© ou cr√©e un mod√®le simple bas√© sur des caract√©ristiques.
"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
import os

def create_simple_ai_detection_model():
    """
    Cr√©e un mod√®le simple pour la d√©tection d'images g√©n√©r√©es par IA.
    Ce mod√®le est bas√© sur des caract√©ristiques visuelles communes.
    """
    print("ü§ñ Cr√©ation d'un mod√®le simple de d√©tection IA...")

    # Architecture du mod√®le
    model = keras.Sequential([
        layers.Input(shape=(128, 128, 3)),

        # Couches de convolution pour extraire les caract√©ristiques
        layers.Conv2D(32, (3, 3), activation='relu'),
        layers.MaxPooling2D((2, 2)),

        layers.Conv2D(64, (3, 3), activation='relu'),
        layers.MaxPooling2D((2, 2)),

        layers.Conv2D(128, (3, 3), activation='relu'),
        layers.MaxPooling2D((2, 2)),

        # Couches denses pour la classification
        layers.Flatten(),
        layers.Dense(128, activation='relu'),
        layers.Dropout(0.5),
        layers.Dense(64, activation='relu'),
        layers.Dropout(0.3),

        # Couche de sortie (probabilit√© que l'image soit g√©n√©r√©e par IA)
        layers.Dense(1, activation='sigmoid')
    ])

    # Compilation du mod√®le
    model.compile(
        optimizer='adam',
        loss='binary_crossentropy',
        metrics=['accuracy']
    )

    print("‚úÖ Mod√®le cr√©√© avec succ√®s")
    print(f"üìä Param√®tres du mod√®le: {model.count_params():,}")

    return model

def create_pretrained_ai_detection_model():
    """
    Cr√©e un mod√®le bas√© sur un r√©seau pr√©-entra√Æn√© (MobileNetV2).
    Plus efficace que le mod√®le simple.
    """
    print("ü§ñ Cr√©ation d'un mod√®le bas√© sur MobileNetV2...")

    # Charger le mod√®le pr√©-entra√Æn√© (sans les couches de classification)
    base_model = keras.applications.MobileNetV2(
        input_shape=(128, 128, 3),
        include_top=False,
        weights='imagenet'
    )

    # Geler les couches du mod√®le de base
    base_model.trainable = False

    # Ajouter nos propres couches de classification
    model = keras.Sequential([
        base_model,
        layers.GlobalAveragePooling2D(),
        layers.Dense(128, activation='relu'),
        layers.Dropout(0.5),
        layers.Dense(64, activation='relu'),
        layers.Dropout(0.3),
        layers.Dense(1, activation='sigmoid')
    ])

    # Compilation du mod√®le
    model.compile(
        optimizer='adam',
        loss='binary_crossentropy',
        metrics=['accuracy']
    )

    print("‚úÖ Mod√®le MobileNetV2 cr√©√© avec succ√®s")
    print(f"üìä Param√®tres du mod√®le: {model.count_params():,}")

    return model

def create_dummy_training_data():
    """
    Cr√©e des donn√©es d'entra√Ænement factices pour initialiser le mod√®le.
    """
    print("üìä Cr√©ation de donn√©es d'entra√Ænement factices...")

    # G√©n√©rer des images factices
    x_train = np.random.random((100, 128, 128, 3)).astype(np.float32)
    y_train = np.random.randint(0, 2, (100, 1)).astype(np.float32)

    x_val = np.random.random((20, 128, 128, 3)).astype(np.float32)
    y_val = np.random.randint(0, 2, (20, 1)).astype(np.float32)

    return (x_train, y_train), (x_val, y_val)

def train_and_save_model(model, model_path="model_v2.h5"):
    """
    Entra√Æne le mod√®le avec des donn√©es factices et le sauvegarde.
    """
    print("üéØ Entra√Ænement du mod√®le...")

    # Cr√©er des donn√©es d'entra√Ænement factices
    (x_train, y_train), (x_val, y_val) = create_dummy_training_data()

    # Entra√Æner le mod√®le (juste quelques epochs pour l'initialiser)
    history = model.fit(
        x_train, y_train,
        validation_data=(x_val, y_val),
        epochs=3,
        batch_size=16,
        verbose=1
    )

    # Sauvegarder le mod√®le
    model.save(model_path)
    print(f"üíæ Mod√®le sauvegard√©: {model_path}")

    return model

def main():
    """Fonction principale pour cr√©er et sauvegarder le mod√®le."""
    print("üöÄ Cr√©ation d'un mod√®le IA pour la d√©tection d'images g√©n√©r√©es par IA")
    print("=" * 60)

    try:
        # Option 1: Mod√®le simple
        print("\n1Ô∏è‚É£ Cr√©ation du mod√®le simple...")
        simple_model = create_simple_ai_detection_model()
        train_and_save_model(simple_model, "model_simple.h5")

        # Option 2: Mod√®le bas√© sur MobileNetV2 (plus efficace)
        print("\n2Ô∏è‚É£ Cr√©ation du mod√®le MobileNetV2...")
        pretrained_model = create_pretrained_ai_detection_model()
        train_and_save_model(pretrained_model, "model_mobilenet.h5")

        # Remplacer l'ancien mod√®le
        if os.path.exists("model.h5"):
            os.rename("model.h5", "model_old.h5")
            print("üì¶ Ancien mod√®le sauvegard√© comme model_old.h5")

        # Utiliser le mod√®le MobileNetV2 comme mod√®le principal
        import shutil
        shutil.copy2("model_mobilenet.h5", "model.h5")
        print("‚úÖ Nouveau mod√®le install√© comme model.h5")

        print("\nüéâ Mod√®les cr√©√©s avec succ√®s!")
        print("üìÅ Fichiers disponibles:")
        print("   - model.h5 (mod√®le principal - MobileNetV2)")
        print("   - model_simple.h5 (mod√®le simple)")
        print("   - model_mobilenet.h5 (mod√®le MobileNetV2)")
        print("   - model_old.h5 (ancien mod√®le sauvegard√©)")

    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation du mod√®le: {e}")
        return False

    return True

if __name__ == "__main__":
    main()
